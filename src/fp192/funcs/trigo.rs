use crate::F192;

impl F192 {
    #[must_use = "method returns a new number and does not mutate the original value"]
    pub fn sin(&self) -> Self {
        let mut is_neg = self.is_neg();
        let mut x = self.abs();
        let pi = F192::PI;
        let pi_2 = pi.shl(1);

        let div_2pi = x.div(&pi_2);
        x = div_2pi.frac().mul(&pi_2);

        if x > pi {
            x = x.sub(&pi);
            is_neg = !is_neg;
        }

        if x > F192::PI_OVER_2 {
            x = pi.sub(&x);
        }

        let result = if x > F192::PI_OVER_4 {
            cos_iter(F192::PI_OVER_2.sub(&x))
        }

        else {
            sin_iter(x)
        };

        if is_neg {
            result.neg()
        }

        else {
            result
        }
    }

    #[must_use = "method returns a new number and does not mutate the original value"]
    pub fn cos(&self) -> Self {
        let mut is_neg = false;
        let mut x = self.abs();
        let pi = F192::PI;
        let pi_2 = pi.shl(1);

        let div_2pi = x.div(&pi_2);
        x = div_2pi.frac().mul(&pi_2);

        if x > pi {
            x = pi_2.sub(&x);
        }

        if x > F192::PI_OVER_2 {
            x = pi.sub(&x);
            is_neg = true;
        }

        let result = if x > F192::PI_OVER_4 {
            sin_iter(F192::PI_OVER_2.sub(&x))
        }

        else {
            cos_iter(x)
        };

        if is_neg {
            result.neg()
        }

        else {
            result
        }
    }

    // TODO: better impl?
    #[must_use = "method returns a new number and does not mutate the original value"]
    pub fn tan(&self) -> Self {
        self.sin().div(&self.cos())
    }
}

// x must be 0 <= x <= pi/4
// x - x^3/6 + x^5/120 - x^7/5040 + x^9/362880 - x^11/39916800 + x^13/6227020800 - x^15/1307674368000 + x^17/355687428096000 - x^19/121645100408832000
fn sin_iter(x: F192) -> F192 {
    if x > F192::ONE_OVER_SQRT_2 {  // there's no special reason I chose this number: it's the closest one among F192::consts
        return sin_near_pi_over_4(x);
    }

    let x_sqr = x.mul(&x);

    let mut result = F192::from(18 * 19).sub(&x_sqr);
    result = result.mul(&x_sqr);
    result = result.sub(&(16 * 17 * 18 * 19).into());
    result = result.mul(&x_sqr);
    result = result.add(&(14 * 15 * 16 * 17 * 18 * 19).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19u64).into());
    result = result.mul(&x);

    // div_i32(19!) = 2^16 * 3^8 * 5^3 * 7^2 * 11^1 * 13*1 * 17^1 * 19^1
    result = result.shr(16);
    result = result.div_i32(6561 * 125);
    result = result.div_i32(2263261);

    result
}

// x must be 0 <= x <= pi/4
// 1 - x^2/2 + x^4/24 - x^6/720 + x^8/40320 - x^10/3628800 + x^12/479001600 - x^14/87178291200 + x^16/20922789888000 - x^18/6402373705728000 + x^20/2432902008176640000
fn cos_iter(x: F192) -> F192 {
    if x > F192::ONE_OVER_SQRT_2 {  // there's no special reason I chose this number: it's the closest one among F192::consts
        return sin_near_pi_over_4(F192::PI_OVER_2.sub(&x));
    }

    let x_sqr = x.mul(&x);
    let mut result = x_sqr.sub(&(19 * 20).into());
    result = result.mul(&x_sqr);
    result = result.add(&(17 * 18 * 19 * 20).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(15 * 16 * 17 * 18 * 19 * 20).into());
    result = result.mul(&x_sqr);
    result = result.add(&(13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.sub(&(3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());
    result = result.mul(&x_sqr);
    result = result.add(&(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11 * 12 * 13 * 14 * 15 * 16 * 17 * 18 * 19 * 20u64).into());

    // div_i32(20!) = 2^18 * 3^8 * 5^4 * 7^2 * 11^1 * 13*1 * 17^1 * 19^1
    result = result.shr(18);
    result = result.div_i32(6561 * 625);
    result = result.div_i32(2263261);

    result
}

// a = 1/sqrt(2)
// p = pi/4
// f(p) = a
// f'(p) = a
// f''(p) = -a
// f(x) = a + a * (x - p) - a/2 * (x - p)^2 - a/6 * (x - p)^3 + a/24 * (x - p)^4 + a/120 * (x - p)^5 - a/720 * (x - p)^6 - a/5040 * (x - p)^7 + a/40320 * (x - p)^8 + a/362880 * (x - p)^9 - a/3628800 * (x - p)^10 - a/39916800 * (x - p)^11
fn sin_near_pi_over_4(x: F192) -> F192 {
    let a = F192::ONE_OVER_SQRT_2;
    let p = F192::PI_OVER_4;
    let x_ = x.sub(&p);

    let mut result = F192::from(11).add(&x_).neg();
    result = result.mul(&x_);
    result = result.add(&(10 * 11).into());
    result = result.mul(&x_);
    result = result.add(&(9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.sub(&(8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.sub(&(7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.add(&(6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.add(&(5 * 6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.sub(&(4 * 5 * 6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.sub(&(3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.add(&(2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&x_);
    result = result.add(&(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11).into());
    result = result.mul(&a);
    result = result.div_i32(1 * 2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10 * 11);

    result
}

#[cfg(test)]
mod tests {
    use crate::F192;
    use crate::fp192::testbench::assert_f64_close;

    // (x, sin(x), cos(x))
    const SAMPLES: [(&'static str, &'static str, &'static str); 122] = [
        ("0.0", "0", "1"),
        ("-0.0", "0", "1"),
        ("0.1", "0.0998334166468281523068", "0.9950041652780257660955"),
        ("-0.1", "-0.099833416646828152306", "0.9950041652780257660955"),
        ("0.2", "0.1986693307950612154594", "0.9800665778412416311241"),
        ("-0.2", "-0.198669330795061215459", "0.9800665778412416311241"),
        ("0.3", "0.2955202066613395751053", "0.9553364891256060196423"),
        ("-0.3", "-0.295520206661339575105", "0.9553364891256060196423"),
        ("0.4", "0.3894183423086504916663", "0.9210609940028850827985"),
        ("-0.4", "-0.389418342308650491666", "0.9210609940028850827985"),
        ("0.5", "0.4794255386042030002732", "0.8775825618903727161162"),
        ("-0.5", "-0.479425538604203000273", "0.8775825618903727161162"),
        ("0.6", "0.5646424733950353572009", "0.8253356149096782972409"),
        ("-0.6", "-0.5646424733950353572009", "0.8253356149096782972409"),
        ("0.7", "0.6442176872376910536726", "0.7648421872844884262558"),
        ("-0.7", "-0.644217687237691053672", "0.7648421872844884262558"),
        ("0.8", "0.7173560908995227616271", "0.6967067093471654209207"),
        ("-0.8", "-0.717356090899522761627", "0.6967067093471654209207"),
        ("0.9", "0.7833269096274833884613", "0.6216099682706644564847"),
        ("-0.9", "-0.783326909627483388461", "0.6216099682706644564847"),
        ("1.0", "0.8414709848078965066525", "0.5403023058681397174009"),
        ("-1.0", "-0.841470984807896506652", "0.5403023058681397174009"),
        ("1.1", "0.8912073600614353399518", "0.4535961214255773877713"),
        ("-1.1", "-0.891207360061435339951", "0.4535961214255773877713"),
        ("1.2", "0.9320390859672263496701", "0.3623577544766735776383"),
        ("-1.2", "-0.93203908596722634967", "0.3623577544766735776383"),
        ("1.3", "0.9635581854171929647013", "0.2674988286245874069979"),
        ("-1.3", "-0.963558185417192964701", "0.2674988286245874069979"),
        ("1.4", "0.9854497299884601806594", "0.1699671429002409386167"),
        ("-1.4", "-0.985449729988460180659", "0.1699671429002409386167"),
        ("1.5", "0.9974949866040544309417", "0.0707372016677029100881"),
        ("-1.5", "-0.997494986604054430941", "0.0707372016677029100881"),
        ("1.6", "0.9995736030415051643421", "-0.02919952230128872620577"),
        ("-1.6", "-0.999573603041505164342", "-0.02919952230128872620577"),
        ("1.7", "0.9916648104524686153461", "-0.128844494295524684087"),
        ("-1.7", "-0.991664810452468615346", "-0.128844494295524684087"),
        ("1.8", "0.9738476308781951865323", "-0.227202094693087055316"),
        ("-1.8", "-0.973847630878195186532", "-0.227202094693087055316"),
        ("1.9", "0.9463000876874144884897", "-0.323289566863503422278"),
        ("-1.9", "-0.946300087687414488489", "-0.323289566863503422278"),
        ("2.0", "0.909297426825681695396", "-0.416146836547142386997"),
        ("-2.0", "-0.909297426825681695396", "-0.416146836547142386997"),
        ("2.1", "0.8632093666488737706807", "-0.50484610459985745162"),
        ("-2.1", "-0.86320936664887377068", "-0.50484610459985745162"),
        ("2.2", "0.808496403819590184304", "-0.588501117255345708524"),
        ("-2.2", "-0.808496403819590184304", "-0.588501117255345708524"),
        ("2.3", "0.7457052121767201773854", "-0.666276021279824193317"),
        ("-2.3", "-0.745705212176720177385", "-0.666276021279824193317"),
        ("2.4", "0.6754631805511509265657", "-0.737393715541245499608"),
        ("-2.4", "-0.675463180551150926565", "-0.737393715541245499608"),
        ("2.5", "0.5984721441039564940518", "-0.801143615546933714833"),
        ("-2.5", "-0.598472144103956494051", "-0.801143615546933714833"),
        ("2.6", "0.5155013718214642352577", "-0.856888753368947233797"),
        ("-2.6", "-0.515501371821464235257", "-0.856888753368947233797"),
        ("2.7", "0.427379880233829934556", "-0.904072142017061147982"),
        ("-2.7", "-0.427379880233829934556", "-0.904072142017061147982"),
        ("2.8", "0.3349881501559049195438", "-0.942222340668658152586"),
        ("-2.8", "-0.334988150155904919543", "-0.942222340668658152586"),
        ("2.9", "0.2392493292139823281842", "-0.970958165149590521781"),
        ("-2.9", "-0.239249329213982328184", "-0.970958165149590521781"),
        ("3.0", "0.1411200080598672221007", "-0.989992496600445457271"),
        ("-3.0", "-0.1411200080598672221007", "-0.989992496600445457271"),
        ("3.1", "0.0415806624332905791946", "-0.999135150273279464492"),
        ("-3.1", "-0.0415806624332905791946", "-0.999135150273279464492"),
        ("3.2", "-0.058374143427579909137", "-0.998294775794753084661"),
        ("-3.2", "0.0583741434275799091372", "-0.998294775794753084661"),
        ("3.3", "-0.1577456941432483820116", "-0.987479769908864883936"),
        ("-3.3", "0.1577456941432483820116", "-0.987479769908864883936"),
        ("3.4", "-0.255541102026831319249", "-0.966798192579461014282"),
        ("-3.4", "0.2555411020268313192499", "-0.966798192579461014282"),
        ("3.5", "-0.35078322768961984812", "-0.936456687290796337698"),
        ("-3.5", "0.3507832276896198481203", "-0.936456687290796337698"),
        ("3.6", "-0.442520443294852384266", "-0.89675841633414700587"),
        ("-3.6", "0.4425204432948523842667", "-0.89675841633414700587"),
        ("3.7", "-0.52983614090849321321", "-0.848100031710408158835"),
        ("-3.7", "0.5298361409084932132107", "-0.848100031710408158835"),
        ("3.8", "-0.611857890942719075733", "-0.790967711914416699996"),
        ("-3.8", "0.6118578909427190757335", "-0.790967711914416699996"),
        ("3.9", "-0.6877661591839738180908", "-0.725932304200140129372"),
        ("-3.9", "0.6877661591839738180908", "-0.725932304200140129372"),
        ("4.0", "-0.7568024953079282513726", "-0.65364362086361191463916"),
        ("-4.0", "0.7568024953079282513726", "-0.65364362086361191463916"),
        ("4.1", "-0.818277111064410504265", "-0.574823946533268911535"),
        ("-4.1", "0.818277111064410504265", "-0.574823946533268911535"),
        ("4.2", "-0.871575772413588060018", "-0.490260821340699577655"),
        ("-4.2", "0.8715757724135880600185", "-0.490260821340699577655"),
        ("4.3", "-0.916165936749454984031", "-0.400799172079975296906"),
        ("-4.3", "0.9161659367494549840317", "-0.400799172079975296906"),
        ("4.4", "-0.951602073889515954035", "-0.307332869978419683119"),
        ("-4.4", "0.9516020738895159540353", "-0.307332869978419683119"),
        ("4.5", "-0.977530117665097055389", "-0.21079579943077970598048"),
        ("-4.5", "0.9775301176650970553891", "-0.21079579943077970598048"),
        ("4.6", "-0.993691003633464456138", "-0.112152526935054517429"),
        ("-4.6", "0.9936910036334644561381", "-0.112152526935054517429"),
        ("4.7", "-0.999923257564100884179", "-0.012388663462890737150508"),
        ("-4.7", "0.9999232575641008841795", "-0.012388663462890737150508"),
        ("4.8", "-0.996164608835840671781", "0.0874989834394465693202"),
        ("-4.8", "0.9961646088358406717815", "0.0874989834394465693202"),
        ("4.9", "-0.982452612624332512276", "0.1865123694225754044943"),
        ("-4.9", "0.9824526126243325122763", "0.1865123694225754044943"),
        ("5.0", "-0.958924274663138468893", "0.2836621854632262644666"),
        ("-5.0", "0.9589242746631384688931", "0.2836621854632262644666"),
        ("5.1", "-0.925814682327732296946", "0.3779777427129805633205"),
        ("-5.1", "0.9258146823277322969461", "0.3779777427129805633205"),
        ("5.2", "-0.883454655720153264673", "0.468516671300376958639"),
        ("-5.2", "0.883454655720153264673", "0.468516671300376958639"),
        ("5.3", "-0.832267442223901163564", "0.5543743361791609294449"),
        ("-5.3", "0.8322674422239011635645", "0.5543743361791609294449"),
        ("5.4", "-0.772764487555987362358", "0.6346928759426343624067"),
        ("-5.4", "0.7727644875559873623584", "0.6346928759426343624067"),
        ("5.5", "-0.705540325570391906231", "0.7086697742912600000274"),
        ("-5.5", "0.7055403255703919062319", "0.7086697742912600000274"),
        ("5.6", "-0.631266637872321311463", "0.7755658785102497976558"),
        ("-5.6", "0.6312666378723213114636", "0.7755658785102497976558"),
        ("5.7", "-0.5506855425976377612273", "0.83471278483915968274923403"),
        ("-5.7", "0.5506855425976377612273", "0.83471278483915968274923403"),
        ("5.8", "-0.464602179413757211418", "0.8855195169413190041646"),
        ("-5.8", "0.4646021794137572114182", "0.8855195169413190041646"),
        ("5.9", "-0.373876664830236359814", "0.9274784307440357409061"),
        ("-5.9", "0.3738766648302363598148", "0.9274784307440357409061"),
        ("1234567.890123", "-0.494342731576558847104", "-0.869267084236730022375"),
        ("-1234567.890123", "0.4943427315765588471049", "-0.869267084236730022375"),
    ];

    const PIS: [(&'static str, &'static str, &'static str); 4] = [
        ("3.141592653589793238462643383279502884197169", "0", "-1"),
        ("-3.141592653589793238462643383279502884197169", "0", "-1"),
        ("31415.92653589793238462643383279502884197169", "0", "1"),
        ("-31415.92653589793238462643383279502884197169", "0", "1"),
    ];

    #[test]
    fn trigo_test() {
        for (x, sin, cos) in SAMPLES.into_iter() {
            let x = x.parse::<F192>().unwrap();
            let sin_x = x.sin();
            let cos_x = x.cos();

            assert_eq!(sin_x.into_code13(), sin.parse::<F192>().unwrap().into_code13());
            assert_eq!(cos_x.into_code13(), cos.parse::<F192>().unwrap().into_code13());
        }

        for (x, sin, cos) in PIS.into_iter() {
            let x = x.parse::<F192>().unwrap();
            let sin_x = x.sin();
            let cos_x = x.cos();

            assert!(1e-24f64 > sin_x.abs().try_into().unwrap());

            assert_f64_close(
                cos_x,
                cos.parse::<F192>().unwrap(),
            );
        }
    }
}
